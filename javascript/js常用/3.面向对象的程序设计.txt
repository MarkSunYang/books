对象属性
理解并创建对象
继承

属性类型：
1.数据属性
2.访问器属性


创建对象：
1)工厂模式  解决了对象创建的问题，但是没有解决对象识别的问题
2).构造函数模式     复用的问题，   
3).原型模式
原型：函数本省也是一个包含了方法和属性的对象，每个函数都有prototype的属性，该属性引用的就是原型对象
原型对象是保存共享属性和共享方法的对象，js并没有规定一个函数的原型类型，因此任何类型都可以是原型

对象(Object)有"[[prototype]]"属性，函数(function)对象有"prototype"属性，原型()对象有"constructor"属性。
原型对象：
3.1).prototype与__proto__
prototype是函数才有的属性
__proto__ 是每个对象都有的属性，但是 __proto__不是一个规范属性，对应的标准属性是[[Prototype]]
__proto__ 可以理解成构造器的原型 __proto__ === constructor.prototype 

function f(){}
typeof f.prototype //object 函数默认具有prototype属性，指向一个对象
对于构造函数来说，生成实例的时候，该属性会自动成为实力对象的原型

 function Person(name,age){
            this.name=name;
            this.age=age;
            this.getInfo=function(){
                console.log("Name:"+name+"Age:"+age);
            }
        }
        var p=new Person("Malik",19);
        console.log(typeof p.__proto__);//Object 是一个Object
        console.log(typeof p.constructor);//function 构造函数
Person{}对象就是p的原型，Person作为一个原型对象也有 __proto__ 属性
constructor 属性 在js的原型对象中，包含一个constructor书香，这个属性对用创建的所有指向该原型的实例的构造函数


__proto__ 属性指向谁？__proto__的指向取决于对象创建时的实现方式
1.字面量方式
var a={};
2.构造器方式
var a=function(){}
var A=new A();

4).组合使用构造函数和原型模式
5).动态原型模式
6).寄生构造函数
7).稳妥构造函数模式
