.net core　和　framework 的关系

//迁移的 HTTP 处理程序和 ASP.NET Core 中间件的模块
https://docs.microsoft.com/zh-cn/aspnet/core/migration/http-modules


初始化webapp模板运行
1.1核心框架
asp.net core mvc 
Dependency Injection
Entity framework core
asp.net core Identity

1.2.asp.net core app创建和运行

2.1 starpup 和Middleware中间件

2.1.1startup
Configure方法 用于处理每次http请求的处理，ConfigureService方法在Configure方法前调用
IApplicationBuilder 构建应用请求管道

constructor（构造函数）
IHostingEnvironment 配置文件，路径
ILoggerFactory 日志创建
ConfigureService  主要实现了DI的配置，


2.2Middleware 
2.2.1中间件注册
中间件的注册在startup中的Configure方法完成

常用中间件
Authentiction 权限支持
CORS 跨域问题
Routing 配置http路由请求
Session 管理用户会话
Static Files 静态文件



3.1.1中间件的作用
用来拦截请求，处理并响应，中间件可以有很多，每个中间件都可以对管道中的请求进行拦截，
它可以决定是否将请求转移给下一个中间件
asp.net core提供了 IApplicationBuilder 接口来把中间件注册到asp.net 的管道请求

3.1.2中间件的运行方式
中间件的执行顺序根据startup文件中 在public void Configure(IApplicationBuilder app){} 方法中注册的先后顺序执行。
大概有三种方式可以在管道中注册中间件
app.User()  接口原生提供 
app.Run()   扩展方法
app.Map()   扩展方法

3.1.3中间件和过滤器的区别
3.1.4我们什么时候需要中间件
3.1.5怎么定义中间件



IApplicationBuilder{
    //应用程序使用的服务
    IServiceProvider ApplicationServices { get; set; }
    
    //工具箱对象
    IFeatureCollection ServerFeatures { get; }
    
    //横跨各个中间件，在他们之间共享数据。对外扩展了
    IDictionary<string, object> Properties { get; }
    
    //最终的 RequestDelegate 形态
    RequestDelegate Build();
    IApplicationBuilder New();
    IApplicationBuilder Use(Func<RequestDelegate, RequestDelegate> middleware);
}

HttpContext 封装了http对象