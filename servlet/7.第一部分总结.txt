对于前5个部分的总结

1.servlet的运行过程

1.1 web服务器首先检查是否已经装载并创建了Servlet的对象，如果是，则执行1.4否则执行1.2
1.2 装载并创建Servlet的一个实力对象
1.3 调用Servlet对象的Init()方法
1.4 创建一个用于封装HTTP请求消息的HttpServletRequest对象和一个代表HTTP响应的消息的
HttpServletResponse对象，然后调用Servlet的service()方法将请求和响应对象作为参数传递进去
1.5 web应用程序被停止或重启之前servlet引擎卸载servlet 在卸载之前调用servlet的destory方法



2.servelt线程的安全问题
多个客户端并发访问同一个Servlet时，web服务器会为每一个客户端的访问请求创建一个线程，并在这个线程上调用Servlet的service方法，
因此service方法内如果访问了同一个资源的话，就有可能引发线程安全问题。例如下面的代码：


3.servletconfig对象 servletcontext对象
getInitParameter，getInitParameterNames 两个方法

4.ServletContext对象：servlet的上下文对象
WEB容器在启动时，它会为每个WEB应用程序都创建一个对应的ServletContext对象，它代表当前web应用。
ServletConfig对象中维护了ServletContext对象的引用，开发人员在编写servlet时，可以通过ServletConfig.getServletContext方法获得ServletContext对象。
由于一个WEB应用中的所有Servlet共享同一个ServletContext对象，因此Servlet对象之间可以通过ServletContext对象来实现通讯。ServletContext对象通常也被称之为context域对象。

多个Servlet通过ServletContext对象实现数据共享
String contextInitParam = context.getInitParameter("url");

用servletContext实现请求转发


利用ServletContext对象读取资源文件

HttpServletRequest:请求对象：获取请求信息
HttpServletResponse:响应对象：设置响应对象
ServletConfig对象：servlet配置对象




