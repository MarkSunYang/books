1.瞎扯淡了http后，我们写一个简单webserver

what？ 我们平时用的IIS、tomcat
how？ 我们如何实现，~~以上太大，我们来个简单的

WebServer的作用：
1.接受来自浏览器的HTTP请求
2.将请求转发给指定的Web站点，
3.向浏览器发送请求处理结果

1.启动服务，监听某个端口
2.接受客户端发来的请求，并返回数据

HttpServer  它用于服务器的启动及接收用户的请求并返回结果
Request 对用户请求进行分析，解析请求串，并获取对应的访问url；
Response 根据用户请求生成响应结果，并将结果输出给客户端。



java版本：



C#版本：
C#中使用Socket请求web服务器过程
http协议是应用层协议，它底层是通过TCP进行数据传输的。
因此，浏览器访问web服务器的过程必须先有“连接建立”的发生。

浏览器向web服务器发出http请求，web服务器给浏览器的回复过程
1.浏览器建立socket，按给定IP（域名）和端口（默认80）连接服务器
比如使用Socket.Connect()、Socket.eginConnect()
2.连接成功后，浏览器依据HTTP协议规范向web服务器发送数据请求，
比如请求行、请求头、请求数据等，这里使用类似Socket.send()

关于HTTP协议中的请求行、请求头标等请参见
http://www.cnblogs.com/riky/archive/2007/04/09/705848.html

3.浏览器等待服务器处理并返回数据
4.web服务器使用Scoket.accept()、Socket.BeginAccept()等方法侦测到浏览器的
连接后，开始接受浏览器的数据。接收到请求数据后，根据HTTP协议规范解析数据，
然后处理，最终将结果如html文档发回给浏览器，可能用到Socket.send,、Socket.BeginSend
5.web服务器发送完处理结果后，关闭socket
6.浏览器接受web服务器发送的如html数据，将其显示在浏览器UI界面，关闭socket
7.一次“浏览器到web服务器”的http请求结束

浏览器向web服务器发送http请求之前，需要建立链接，类似socket
http协议的无连接特性并不是指：浏览器与web服务器之间进行数据交互时不需要建立连接
浏览器每次请求完毕后都会与服务器处于断开状态，下一次请求时再重新与服务器建立链接，
HTTP的无连接特性指浏览器的每次请求必须与服务器建立连接。正常情况下，浏览器不会与web
服务器建立长时间的链接，
1.HTTP的特性：
1.1.无连接
服务器与浏览器之间的每次链接只会处理一个http请求，处理结束后，连接断开，下次请求重新连接

1.2.无状态
服务器不会保存浏览器信息，也就是说，服务器在第一次http请求处理的结果不会保留到第二次请求。
如果第二次请求处理时，需要用到第一次请求处理的结果，浏览器在第二次请求时，
必须将第一次处理结果重新回传给web服务器（比如cookie）

C#中使用 Socket实现简单的web服务器：
~~
熟悉Socket编程
熟悉HTTP协议

我们可以通过socket来模拟浏览器向web服务器发送http请求，
web服务器如何接受、分析、处理最后来回复浏览器？

web服务器和浏览器之间无论是发送数据还是接受数据，都遵守了HTTP协议。
只要我们充分熟悉HTTP协议结构，那么无论浏览器的实现还是web服务器的实现，
都是简单的Socket开发，除此之外，无其他神秘高深的东西，
生产者=》消费者模式


C# 实现简单的web服务器，该服务器向请求的浏览器返回一个静态的HTML页面

1.获得本机的IP地址， IPAddress
2.创建可以访问的端口， IPEndPoint
3.创建Socket对象，使用IPV4地址，数据通信为数据流，传输控制协议为TCP/IP Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
4.将Socket 绑定到ip端口 Scoket.Bind 
5.监听部分：
    开始监听，这个方法会堵塞线程的执行，知道接收到客户的请求


Socket存在于客户端和服务器端：
客户端： socket()->Connect()->while()->read()->close();


服务器 socket()->bind()->listen()->accpet()->read()->write()->read()->close()
1.创建Socket套接字，绑定指定host，并监听。
2.线程堵塞等待用户端请求，当客户端请求到达时建立连接。
















