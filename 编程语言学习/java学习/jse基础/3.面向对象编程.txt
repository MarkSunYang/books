万丈高楼平地而起

面向对象编程 面向过程编程
哈哈先贴出IBM的 developerworks ()
https://www.ibm.com/developerworks/cn/java/j-perry-object-oriented-programming-concepts-and-principles/index.html

想必无论是上课，还是面试，大家都会被被问道什么是面向对象编程，
它和面向过程编程的区别是什么？
面向对象有哪些特性？
它的优点是什么？
诸如一系列的问题，当然，这个问题很大，回答也很多，每个人心中都有自己的面向对象

之前我粗略的看过c语言（这里可能要误导人了，毕竟只是粗略看过），c语言中没有对象，我们写方法的时候只要先声明方法体，然后就可以写具体的方法了，它通过结构体来表示我们要表示的数据结构，
我们去描述一个人的时候我们通过写一个结构体来表示，但是我们在写java等面向对象的语言我们可以直接写一个Person class

面向对象有三大特性 继承封装和多态
既然是三大特性，那么怎么体现面向对象呢？


1.继承
A类继承B类，那么A类就是B类的子类，A类是B类的父类，A拥有了B的属性和方法，子类可以自己拥有自己的属性和方法，
目的是为了实现类的扩展，子类也可以复写父类的方法，

继承的实现方式：实现继承、接口继承和可视继承。
继承涉及的概念：构造函数，protect


2.封装
封装，也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。


3.多态
是允许将父类对象设置成和一个或更多他的子类的对象相等的技术(里氏替换原则便是其中的体现)

多态存在的三个必要条件
1).继承
2).重写
3).父类引用指向子类对象

多态的实现方式：
1).重写
2).接口
3).抽象类和抽象方法


继承可以扩展已存在的模块，提高代码的重用
封装可以保护私有成员
多态 在类继承和派生的时候，保证家族谱中任何的实例被正确的调用，实现了接口重用



面向对象的思想跟多的是让我们思考如何去抽象，
刚工作的时候我们接到任务的时候可能回想如何实现这个功能，我们会被具体的实现所困扰，


设计模式的原版是用c++去写的，在我们学习设计模式的时候，很多的时候都是去体现面向对象的思想，
所以理解了面向对象的思想是很重要的~~

待续 ~~


面向对象的思想离不开 接口，抽象类，继承 
1.继承 extends
什么是继承？
继承是对现实生活中的“分类”概念的一种模拟。继承有IS-A的关系
继承的语法
class 子类名 extends 父类名{}
概念：父类，超类 基类

继承条件下类的访问权限： public:外界可自由访问，private:外界不可访问
protected:同一包中的子类都可以访问，另一包中的子类（派生于同一个父类）也可以访问
default:如果不指明任何权限，则默认同一包中的类可以访问

1.1 继承条件下的构造方法调用
(可通过断点调试观察代码执行顺序)
1).在继承父类的默认调用父类的无参构造函数，如果父类里面没有无参的构造函数
那么子类的无参构造函数就会报错，如果想要调用有残构造函数就要用到super了，
而且必须将super放在子类构造函数第一行
2).在初始化子类之前显示初始化父类，
2).在调用父类属性，super和this的形式区别父类，子类成员

继承的构造函数说明：
1).子类的构造函数如果没有明确的调用父类的构造函数方法，他会默认地调用父类的不带参数的方法
2).如果父类有定义带了参数的构造方法，但是没有定义不带参数的构造方法，
则系统不会默认为其创建不带参数的构造方法
三种情况 子类不能继承父类的显示定义的构造方法，若想要继承父类的构造方法，并在方法中通过super调用父类的该构造函数
1).父类中没有显示定义任何构造函数，此时父类中实际有一个默认的无参数构造方法。这时，在子类中显式定义任何构造方法时，可以不用使用super调用父类的默认方法。
2).父类中显式定义了默认的无参数构造方法，那么子类可以定义任意的构造方法，而不必使用super调用父类的构造方法
3).父类中显示定义了构造方法，却没有显示定义默认的无参数构造方法，那么子类定义任何构造方法中都需要通过super调用父类的构造方法


1.2不允许继承的类
final class 类名{}
1).以final声明的方法不允许覆盖
2).以final申明的变量不允许更改
3).利用final，可以设计出一种特殊 只读的 不可变类即创建对象后，此对象的属性不可改变
而且无法从此派生出新的子类，String就是案例
用处：可以方便和安全的用于多线程环境，访问他们可以不加锁，因而能提供较高的性能

子类和父类之间的关系：
1).扩充：Extends：子类定义的方法父类没有同名
2).覆写/重写(Override):子类父类定义了完全一样的方法（注意覆写规则）
3).重载：子类有父类的同名方法，但是两者的翻出类型或者数目不一样

java中所有类都派生Objet类
object的方法有 
clone() 创建并返回此对象的副本
equals(Object obj)指示一些其他对象是否等于此
finalize() 当垃圾收集确定不再有对该对象的引用时，垃圾收集器在对象上调用该对象。 
getClass<?>()返回此 Object的运行时类。
hashCode() 返回对象的哈希码
notify() 唤醒正在等待对象监视器的单个线程。 
toString() 返回对象的字符串表示形式。 
zai “+”运算中，当任何一个对象与一个String对象连接时，都会隐式调用toString()
方法，默认情况下，此方法返回类名@+hashCode，为了分拿回有意义的信息，可以用String重写


2. 抽象类 Abstract 和接口 Interface


抽象类和普通类的区别
1).抽象类不能实例化自己
2).抽象类可以有抽象方法(普通类没有抽象方法)
3).抽象类没有方法体 public abstact void eat();
4).抽象类的非抽象子类必须重写抽象类的抽象方法
5).不能用private sealed static final 修饰符修饰

抽象类除了不能实例化对象之外，类的其他功能依然存在，成员变量，成员方法和构造方法的访问和普通类一样
由于抽象类不能实例化，所以抽象类必须被继承，才能被使用。
父类包含了子类集合常见的方法，但是由于父类本身是抽象的，所以不能使用这些方法。
在java中抽象类表示的是一种继承关系，一个类只能继承一个抽象接口，而一个类可以实现多个接口


抽象方法：
1.如果一个类包含抽象方法，那么该类必须是抽象类
2.任何子类必须重写父类的抽象方法，或者声明为自身为抽象类


抽象类 抽象类变量 = new 派生自抽象类的具体子类();

接口

java是单继承
可以实现多个接口，但是只能继承一个类


说了这么多，我们并不是为了理解概念，而是为了在程序中使用抽象类和接口
我们选择抽象类或者接口的时候依据是什么？

接口和抽象类的概念不一样，
*接口是对动作的抽象
*抽象类是对根源的抽象

.抽象类要表示的是这个对象是什么，
.接口要表示的是，这个对象能做什么



比如我们要定一个读取Excel的对象，我们是写成接口还是写成抽象类呢？

异同：
1.抽象类和接口都不能被直接实例化，如果要实例化
抽象类 
2.抽象类要被子类继承，接口要被类实现。
3.接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现
4.接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
5.