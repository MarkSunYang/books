
Ensure a class only has one instance, and provide a globale point of access to instance
确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例。

适用场景
1.要求生成唯一的序列号的环境
2.在整个项目中需要一个共享访问点或共享数据
3.创建一个对象需要小号的资源很多，比如IO和数据库资源
4.需要定义大量的静态常量和静态方法的工具


对单例的实现可以分为两大类——懒汉式和饿汉式，他们的区别在于：
懒汉式：指全局的单例实例在第一次被使用时构建。
饿汉式：指全局的单例实例在类装载时构建。



    /// <summary>
    /// 线程不安全的单例模式
    /// </summary>
    public class SingletonNotSafeWithMutilThread
    {
        private static SingletonNotSafeWithMutilThread singleton =null;
        private static int i = 0;
        public SingletonNotSafeWithMutilThread() { }

        public static SingletonNotSafeWithMutilThread CreateSingleton()
        {
            if (singleton== null){
                i++;
                Console.WriteLine(i.ToString());
                singleton =new SingletonNotSafeWithMutilThread();
            }
            return singleton;
        }

    }

    /// <summary>
    /// 懒汉式，线程安全
    /// 效率存在问题，任何时候只有一个
    /// </summary>
    public class SingletonSafeWithMutilThread
    {
        private static readonly object syncObject = new object();
        private static SingletonSafeWithMutilThread singleton = null;
        private static int i = 0;
        public SingletonSafeWithMutilThread() { }

        public  static  SingletonSafeWithMutilThread CreateSingleton()
        {
            lock (syncObject)
            {
                if (singleton == null)
                {
                    i++;
                    Console.WriteLine(i.ToString());
                    singleton = new SingletonSafeWithMutilThread();
                }
                Thread.Sleep(2000);
            }
            return singleton;
        }

        public static int GetNumber()
        {
           
            lock (syncObject)
            {
                i++;
                Console.WriteLine(i.ToString());
            }
          
            return i;
        }
    }

    /// <summary>
    /// 如果对象已经创建了那么直接返回，如果没有创建，那么返回实例
    /// </summary>
    public class SingletonSafeWithMutilThreadDoubleCheck
    {
        private static readonly object syncObject = new object();
        private static SingletonSafeWithMutilThreadDoubleCheck singleton = null;
        private static int i = 0;
        public SingletonSafeWithMutilThreadDoubleCheck() { }

        public static SingletonSafeWithMutilThreadDoubleCheck CreateSingleton()
        {
            if (singleton==null)
            {
                lock (syncObject)
                {
                    if (singleton == null)
                    {
                        i++;
                        Console.WriteLine(i.ToString());
                        singleton = new SingletonSafeWithMutilThreadDoubleCheck();
                    }
                }
            }

            return singleton;
        }
    }
