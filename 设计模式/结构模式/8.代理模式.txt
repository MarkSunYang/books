代理模式是结构模式的一种
意图：为其他对象提供一种代理可以控制这个对象的访问
1.代理对象：起到中介作用，连接客户端和目标对象
作用
通过引入代理对象的方式来简介访问目标对象
解决的问题
防止直接访问目标对象代理的不必要复杂性

代理模式分为四个角色
1).主题接口: 定义代理类和真实主题的公共对外方法，也是代理类真实主题的方法
2).真实主题: 真是实现业务逻辑的类
3).代理类: 用代理和封装真实主题
4).客户端: 客户端，使用代理类和主题完成工作


延迟加载：
假设某客户端软件有根据用户请求去数据库查询数据的功能。在查询数据前，需要获得数据库连接，软件开启时初始化系统的所有类，此时尝试获得数据库连接。
当系统有大量的类似操作存在时 (比如 XML 解析等)，所有这些初始化操作的叠加会使得系统的启动速度变得非常缓慢。
为此，使用代理模式的代理类封装对数据库查询中的初始化操作，当系统启动时，初始化这个代理类，而非真实的数据库查询类，而代理类什么都没有做。
因此，它的构造是相当迅速的。
在系统启动时，将消耗资源最多的方法都使用代理模式分离，可以加快系统的启动速度，减少用户的等待时间。
而在用户真正做查询操作时再由代理类单独去加载真实的数据库查询类，完成用户的请求。这个过程就是使用代理模式实现了延迟加载。



优点：协调调用者和被调用者，降低了系统的耦合度；代理对象作为客户目标和对象之间的中介，起到了保护对象的作用
缺点，由于在客户端和真实主题之间增加了代理对象，因此会造成请求处理的速度变慢；实现代理模式需要额外的工作，增加了系统的复杂度


1).远程代理 为位于两个不同地址空间的对象的访问提供了一种实现机制，可以将一些消耗资源较多的对象和操作放到性能更好的计算机上，提高效率
2).虚拟代理 通过一个消耗资源较少的对象来代表一个消耗资源较多的对象，可以在一定程度上节省系统的运行开销。
3).为某一个操作的结果提供临时的缓存存储空间，以便在后续使用中能够共享这些结果，优化系统性能，缩短执行时间。
4).可以控制对一个对象的访问权限，为不同用户提供不同级别的使用权限。

 http://www.cnblogs.com/MarkSun3/p/8759370.html