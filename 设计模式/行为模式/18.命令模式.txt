Command 模式
我们经常需要向某些对象发送请求，但是并不知道请求的接收者是谁，也不知道被请求的操作是哪个，
我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计，使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活。

比如视窗操作的菜单，有新建，打开，关闭三个功能键，我们可以定义
public Menu{
    public void Open();
    public void New();
    public void Close():
}

如果现在需要添加一个保存按钮，我们需要修改Menu类，

经典的命令模式的4个角色
Command：定义命令的统一接口
ConcreteCommand:Command接口的实现者，用来执行具体的命令，某些情况下可以直接用来充当Receiver。
Receiver：命令的实际执行者
Invoker：调用者持有一个命令对象，并在某个时刻调用命令对象的 execute() 方法。

Client（客户）：负责创建一个具体的命令（Concrete Command） 

命令模式是将对象封装到命令中



