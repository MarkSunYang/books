1.单一职责原则

2.里氏替换原则（Liskov Substitution Principle）
Subtypes must be substitutable for their base types. 派生类型必须可以替换他的基类型

继承提供了让子类共享基类的代码，这是通过基类型通过封装通用的数据和行为来实现的，

定义1：如果每一个类型为T1的对象o1，都有类型为T2的对象o2，使得T1定义的所有程序P在所有的对象o1都代换成o2
程序P的行为没有发生改变，那么类型T2是类型T1的子类型。
定义2：所有引用基类的地方必须能够透明的使用子类的对象

解决方法：当使用继承时，遵循里氏替换原则，类B继承类A，除了添加新的方法完成新增功能，尽量不要重写父类A的方法


子类可以扩展父类的功能，但不能改变父类原有的功能

子类可以实现父类的抽象方法，但是不能覆盖父类的非抽象方法
子类中可以增加自己特有的方法
当子类覆盖或实现父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。
当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。

3.依赖倒转原则（Dependence Inversion Principle）

4.接口隔离原则（Interface Segregation Principle）

5.迪米特法则（最少知道原则）（Demeter Principle）

6.合成复用原则（Composite Reuse Principle）